/*!
 * @vueblocks/vue-use-axios v0.2.10
 * (c) 2021 xiaoluoboding
 * @license MIT
 */
import { reactive, toRefs } from 'vue-demi';
import axios from 'axios';
import debounce from 'lodash.debounce';
import throttle from 'lodash.throttle';

const state = reactive({
    response: null,
    data: undefined,
    finished: false,
    canceled: false,
    error: null
});
const request = (url, config, options) => {
    axios(url, config)
        .then((r) => {
        state.response = r;
        state.data = r.data;
        state.finished = true;
    })
        .catch((e) => {
        state.error = e;
        state.finished = true;
    });
};
const useAxios = (url, config, options) => {
    // handle cancel request
    const cancelToken = axios.CancelToken.source();
    const cancel = (message) => {
        cancelToken.cancel(message);
        state.canceled = true;
    };
    let axiosConfig = {
        ...config,
        cancelToken: cancelToken.token
    };
    let refetch;
    if (options && options.debounce && options.debounce > 0) {
        refetch = debounce(() => request(url, axiosConfig), options.debounce);
    }
    else if (options && options.throttle && options.throttle > 0) {
        refetch = throttle(() => request(url, axiosConfig), options.throttle);
    }
    else {
        refetch = () => request(url, axiosConfig);
    }
    refetch();
    return {
        ...toRefs(state),
        refetch,
        cancel
    };
};

export { useAxios };
