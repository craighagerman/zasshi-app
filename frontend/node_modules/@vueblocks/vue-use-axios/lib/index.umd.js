/*!
 * @vueblocks/vue-use-axios v0.2.10
 * (c) 2021 xiaoluoboding
 * @license MIT
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue-demi'), require('axios'), require('lodash.debounce'), require('lodash.throttle')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue-demi', 'axios', 'lodash.debounce', 'lodash.throttle'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.VueUseAxios = {}, global.VueDemi, global.Axios, global.lodash.debounce, global.lodash.throttle));
}(this, (function (exports, vueDemi, axios, debounce, throttle) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
  var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
  var throttle__default = /*#__PURE__*/_interopDefaultLegacy(throttle);

  const state = vueDemi.reactive({
      response: null,
      data: undefined,
      finished: false,
      canceled: false,
      error: null
  });
  const request = (url, config, options) => {
      axios__default['default'](url, config)
          .then((r) => {
          state.response = r;
          state.data = r.data;
          state.finished = true;
      })
          .catch((e) => {
          state.error = e;
          state.finished = true;
      });
  };
  const useAxios = (url, config, options) => {
      // handle cancel request
      const cancelToken = axios__default['default'].CancelToken.source();
      const cancel = (message) => {
          cancelToken.cancel(message);
          state.canceled = true;
      };
      let axiosConfig = {
          ...config,
          cancelToken: cancelToken.token
      };
      let refetch;
      if (options && options.debounce && options.debounce > 0) {
          refetch = debounce__default['default'](() => request(url, axiosConfig), options.debounce);
      }
      else if (options && options.throttle && options.throttle > 0) {
          refetch = throttle__default['default'](() => request(url, axiosConfig), options.throttle);
      }
      else {
          refetch = () => request(url, axiosConfig);
      }
      refetch();
      return {
          ...vueDemi.toRefs(state),
          refetch,
          cancel
      };
  };

  exports.useAxios = useAxios;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
